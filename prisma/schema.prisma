// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  folders       Folder[]
  qrCodes       QrCode[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Folder {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  qrCodes   QrCode[]
}

model QrCode {
  id           String   @id @default(uuid())
  name         String
  url          String
  options      String
  includeLogo  Boolean  @default(false)
  includeFrame Boolean  @default(false)
  frameText    String?
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  folder       Folder?  @relation(fields: [folderId], references: [id])
  folderId     String?
  scans        Scan[]
}

model Scan {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  ipAddress String?
  userAgent String?
  qrCode    QrCode   @relation(fields: [qrCodeId], references: [id])
  qrCodeId  String
}
